//
//  PaintCodeTutorial.m
//  PaintCodeTutorial
//
//  Created by wsh on 16/7/27.
//  Copyright (c) 2016 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "PaintCodeTutorial.h"


@implementation PaintCodeTutorial

#pragma mark Cache

static UIColor* _color4 = nil;

static UIImage* _imageOfStopWatch = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _color4 = [UIColor colorWithRed: 0.067 green: 0.553 blue: 0.855 alpha: 1];

}

#pragma mark Colors

+ (UIColor*)color4 { return _color4; }

#pragma mark Drawing Methods

+ (void)drawStopWatch
{
    //// Color Declarations
    UIColor* baseColor = [UIColor colorWithRed: 0.925 green: 0.927 blue: 0.929 alpha: 1];
    CGFloat baseColorHSBA[4];
    [baseColor getHue: &baseColorHSBA[0] saturation: &baseColorHSBA[1] brightness: &baseColorHSBA[2] alpha: &baseColorHSBA[3]];

    UIColor* color3 = [UIColor colorWithHue: baseColorHSBA[0] saturation: 1 brightness: baseColorHSBA[2] alpha: baseColorHSBA[3]];

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(15, 30, 220, 220)];
    [color3 setFill];
    [ovalPath fill];


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(114, 2, 22, 34)];
    [color3 setFill];
    [rectanglePath fill];


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(214.14, 25)];
    [bezierPath addLineToPoint: CGPointMake(235.36, 46.21)];
    [bezierPath addLineToPoint: CGPointMake(221.21, 60.35)];
    [bezierPath addCurveToPoint: CGPointMake(220.14, 59.28) controlPoint1: CGPointMake(221.21, 60.35) controlPoint2: CGPointMake(220.82, 59.96)];
    [bezierPath addCurveToPoint: CGPointMake(220.14, 60) controlPoint1: CGPointMake(220.14, 59.74) controlPoint2: CGPointMake(220.14, 60)];
    [bezierPath addLineToPoint: CGPointMake(200.14, 60)];
    [bezierPath addLineToPoint: CGPointMake(200.14, 40)];
    [bezierPath addLineToPoint: CGPointMake(200.86, 40)];
    [bezierPath addCurveToPoint: CGPointMake(200, 39.14) controlPoint1: CGPointMake(200.31, 39.45) controlPoint2: CGPointMake(200, 39.14)];
    [bezierPath addLineToPoint: CGPointMake(214.14, 25)];
    [bezierPath closePath];
    [[self color4] setFill];
    [bezierPath fill];


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(129, 60)];
    [bezier2Path addCurveToPoint: CGPointMake(129, 125.54) controlPoint1: CGPointMake(129, 60) controlPoint2: CGPointMake(129, 94.38)];
    [bezier2Path addCurveToPoint: CGPointMake(140, 140) controlPoint1: CGPointMake(135.34, 127.29) controlPoint2: CGPointMake(140, 133.1)];
    [bezier2Path addCurveToPoint: CGPointMake(129, 154.46) controlPoint1: CGPointMake(140, 146.9) controlPoint2: CGPointMake(135.34, 152.71)];
    [bezier2Path addCurveToPoint: CGPointMake(129, 175) controlPoint1: CGPointMake(129, 166.65) controlPoint2: CGPointMake(129, 175)];
    [bezier2Path addLineToPoint: CGPointMake(121, 175)];
    [bezier2Path addCurveToPoint: CGPointMake(121, 154.46) controlPoint1: CGPointMake(121, 175) controlPoint2: CGPointMake(121, 166.65)];
    [bezier2Path addCurveToPoint: CGPointMake(110, 140) controlPoint1: CGPointMake(114.66, 152.71) controlPoint2: CGPointMake(110, 146.9)];
    [bezier2Path addCurveToPoint: CGPointMake(121, 125.54) controlPoint1: CGPointMake(110, 133.1) controlPoint2: CGPointMake(114.66, 127.29)];
    [bezier2Path addCurveToPoint: CGPointMake(121, 60) controlPoint1: CGPointMake(121, 94.38) controlPoint2: CGPointMake(121, 60)];
    [bezier2Path addLineToPoint: CGPointMake(129, 60)];
    [bezier2Path addLineToPoint: CGPointMake(129, 60)];
    [bezier2Path closePath];
    [UIColor.whiteColor setFill];
    [bezier2Path fill];
}

+ (void)drawStopWatch_Hand
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Bezier 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 125, 103.48);

    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(4, -80.48)];
    [bezier2Path addCurveToPoint: CGPointMake(4, -14.94) controlPoint1: CGPointMake(4, -80.48) controlPoint2: CGPointMake(4, -46.11)];
    [bezier2Path addCurveToPoint: CGPointMake(15, -0.48) controlPoint1: CGPointMake(10.34, -13.19) controlPoint2: CGPointMake(15, -7.38)];
    [bezier2Path addCurveToPoint: CGPointMake(4, 13.98) controlPoint1: CGPointMake(15, 6.41) controlPoint2: CGPointMake(10.34, 12.23)];
    [bezier2Path addCurveToPoint: CGPointMake(4, 34.52) controlPoint1: CGPointMake(4, 26.17) controlPoint2: CGPointMake(4, 34.52)];
    [bezier2Path addLineToPoint: CGPointMake(-4, 34.52)];
    [bezier2Path addCurveToPoint: CGPointMake(-4, 13.98) controlPoint1: CGPointMake(-4, 34.52) controlPoint2: CGPointMake(-4, 26.17)];
    [bezier2Path addCurveToPoint: CGPointMake(-15, -0.48) controlPoint1: CGPointMake(-10.34, 12.23) controlPoint2: CGPointMake(-15, 6.41)];
    [bezier2Path addCurveToPoint: CGPointMake(-4, -14.95) controlPoint1: CGPointMake(-15, -7.38) controlPoint2: CGPointMake(-10.34, -13.19)];
    [bezier2Path addCurveToPoint: CGPointMake(-4, -80.48) controlPoint1: CGPointMake(-4, -46.11) controlPoint2: CGPointMake(-4, -80.48)];
    [bezier2Path addLineToPoint: CGPointMake(4, -80.48)];
    [bezier2Path addLineToPoint: CGPointMake(4, -80.48)];
    [bezier2Path closePath];
    [UIColor.whiteColor setFill];
    [bezier2Path fill];

    CGContextRestoreGState(context);
}

#pragma mark Generated Images

+ (UIImage*)imageOfStopWatch
{
    if (_imageOfStopWatch)
        return _imageOfStopWatch;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(250, 250), NO, 0.0f);
    [PaintCodeTutorial drawStopWatch];

    _imageOfStopWatch = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfStopWatch;
}

#pragma mark Customization Infrastructure

- (void)setStopWatchTargets: (NSArray*)stopWatchTargets
{
    _stopWatchTargets = stopWatchTargets;

    for (id target in self.stopWatchTargets)
        [target setImage: PaintCodeTutorial.imageOfStopWatch];
}


@end
